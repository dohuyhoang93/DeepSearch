use colored::*;
use num_cpus;
use rayon::prelude::*;
use std::collections::HashMap;
use std::io::{self, Write};
use std::path::Path;
use std::sync::{
    atomic::{AtomicBool, AtomicUsize, Ordering},
    Arc,
};
use std::thread;
use std::time::{Duration, Instant};
use unicode_normalization::char::is_combining_mark;
use unicode_normalization::UnicodeNormalization;
use walkdir::WalkDir;

// Ki·ªÉm tra xem c√≥ th∆∞ m·ª•c c·∫•p 2 trong c·∫•p 1 hay kh√¥ng
fn has_second_level(path: &Path) -> bool {
    WalkDir::new(path)
        .min_depth(1)
        .max_depth(1)
        .into_iter()
        .filter_map(Result::ok)
        .any(|e| {
            e.path().is_dir()
                && WalkDir::new(e.path())
                    .min_depth(1)
                    .max_depth(1)
                    .into_iter()
                    .any(|f| f.is_ok())
        })
}

// Thi·∫øt l·∫≠p s·ªë thread Rayon g·∫•p ƒë√¥i s·ªë nh√¢n logic CPU
fn setup_thread_pool() {
    let num_cpus = num_cpus::get();
    let num_threads = num_cpus * 2;
    rayon::ThreadPoolBuilder::new()
        .num_threads(num_threads)
        .build_global()
        .unwrap();
    println!(
        "üöÄ Logical CPUs: {} | Threads used: {}",
        num_cpus, num_threads
    );
}

/// Tr·∫£ v·ªÅ b·∫£ng √°nh x·∫° t·ª´ k√Ω t·ª± c√≥ d·∫•u sang kh√¥ng d·∫•u
fn vietnamese_char_map() -> HashMap<char, char> {
    let mut map = HashMap::new();
    let pairs = [
        ('√†', 'a'),
        ('√°', 'a'),
        ('·∫°', 'a'),
        ('·∫£', 'a'),
        ('√£', 'a'),
        ('√¢', 'a'),
        ('·∫ß', 'a'),
        ('·∫•', 'a'),
        ('·∫≠', 'a'),
        ('·∫©', 'a'),
        ('·∫´', 'a'),
        ('ƒÉ', 'a'),
        ('·∫±', 'a'),
        ('·∫Ø', 'a'),
        ('·∫∑', 'a'),
        ('·∫≥', 'a'),
        ('·∫µ', 'a'),
        ('√®', 'e'),
        ('√©', 'e'),
        ('·∫π', 'e'),
        ('·∫ª', 'e'),
        ('·∫Ω', 'e'),
        ('√™', 'e'),
        ('·ªÅ', 'e'),
        ('·∫ø', 'e'),
        ('·ªá', 'e'),
        ('·ªÉ', 'e'),
        ('·ªÖ', 'e'),
        ('√¨', 'i'),
        ('√≠', 'i'),
        ('·ªã', 'i'),
        ('·ªâ', 'i'),
        ('ƒ©', 'i'),
        ('√≤', 'o'),
        ('√≥', 'o'),
        ('·ªç', 'o'),
        ('·ªè', 'o'),
        ('√µ', 'o'),
        ('√¥', 'o'),
        ('·ªì', 'o'),
        ('·ªë', 'o'),
        ('·ªô', 'o'),
        ('·ªï', 'o'),
        ('·ªó', 'o'),
        ('∆°', 'o'),
        ('·ªù', 'o'),
        ('·ªõ', 'o'),
        ('·ª£', 'o'),
        ('·ªü', 'o'),
        ('·ª°', 'o'),
        ('√π', 'u'),
        ('√∫', 'u'),
        ('·ª•', 'u'),
        ('·ªß', 'u'),
        ('≈©', 'u'),
        ('∆∞', 'u'),
        ('·ª´', 'u'),
        ('·ª©', 'u'),
        ('·ª±', 'u'),
        ('·ª≠', 'u'),
        ('·ªØ', 'u'),
        ('·ª≥', 'y'),
        ('√Ω', 'y'),
        ('·ªµ', 'y'),
        ('·ª∑', 'y'),
        ('·ªπ', 'y'),
        ('ƒë', 'd'),
        ('ƒê', 'D'),
    ];
    for (from, to) in pairs {
        map.insert(from, to);
    }
    map
}

/// Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát b·∫±ng b·∫£ng √°nh x·∫°
fn remove_vietnamese_accents(s: &str) -> String {
    let char_map = vietnamese_char_map();
    s.nfd() // Chu·∫©n h√≥a Unicode NFD
        .filter(|c| !is_combining_mark(*c)) // X√≥a d·∫•u k·∫øt h·ª£p
        .map(|c| *char_map.get(&c).unwrap_or(&c)) // Thay th·∫ø k√Ω t·ª± c√≥ d·∫•u th√†nh kh√¥ng d·∫•u
        .collect()
}

/// Chu·∫©n h√≥a chu·ªói: Lo·∫°i b·ªè d·∫•u, chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng, x√≥a kho·∫£ng tr·∫Øng d∆∞ th·ª´a
fn normalize_string(s: &str) -> String {
    remove_vietnamese_accents(s) // B·ªè d·∫•u ti·∫øng Vi·ªát
        .chars()
        .filter(|c| c.is_alphanumeric() || c.is_whitespace()) // Gi·ªØ ch·ªØ c√°i, s·ªë v√† kho·∫£ng tr·∫Øng
        .collect::<String>()
        .to_lowercase() // Chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
        .split_whitespace()
        .collect::<Vec<_>>() // X√≥a kho·∫£ng tr·∫Øng d∆∞ th·ª´a gi·ªØa c√°c t·ª´
        .join(" ") // N·ªëi l·∫°i th√†nh chu·ªói v·ªõi d·∫•u c√°ch chu·∫©n
}

fn input_path() -> String {
    loop {
        print!("{}", "\n‚å®Ô∏è Enter folder path: ".bold().green());
        io::stdout().flush().unwrap();
        let mut path = String::new();
        io::stdin()
            .read_line(&mut path)
            .expect("Invalid path. Re-enter");
        let path = path.trim().to_string();
        if Path::new(&path).exists() {
            break path;
        } else {
            println!("‚ùå Error: Invalid path! Re enter path.");
        }
    }
}

fn input_keyword() -> String {
    print!("{}", "\n‚å®Ô∏è Enter keyword: ".bold().green());
    io::stdout().flush().unwrap();
    let mut keyword = String::new();
    io::stdin()
        .read_line(&mut keyword)
        .expect("Error keyword input");
    keyword.trim().to_string()
}

fn main() {
    let logo = r#"
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ÄÉ‚ÄÉ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ÄÉ‚ÄÉ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ÄÉ‚ÄÉ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù‚ñë‚ÄÉ‚ÄÉ‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ÄÉ‚ÄÉ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ÄÉ‚ÄÉ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù"#;
    println!("{}", logo.bold().blue());
    println!("{}", "Developed by THEUS".bold().blue());

    setup_thread_pool();
    let is_running = Arc::new(AtomicBool::new(true));
    let is_paused = Arc::new(AtomicBool::new(false)); // Ki·ªÉm so√°t t·∫°m d·ª´ng
    let is_stopped = Arc::new(AtomicBool::new(false)); // Ki·ªÉm so√°t d·ª´ng ngay l·∫≠p t·ª©c

    loop {
        let path = input_path();
        let depth_limit = if has_second_level(Path::new(&path)) {
            2
        } else {
            1
        };

        println!("üìÅ Folder depth: {}", depth_limit);

        let keyword = input_keyword();
        let normalized_keyword = normalize_string(&keyword);

        // Reset tr·∫°ng th√°i tr∆∞·ªõc m·ªói l·∫ßn t√¨m ki·∫øm
        is_running.store(true, Ordering::Relaxed);
        is_paused.store(false, Ordering::Relaxed);
        is_stopped.store(false, Ordering::Relaxed);

        let is_running_clone = Arc::clone(&is_running);
        let is_paused_clone = Arc::clone(&is_paused);
        let is_stopped_clone = Arc::clone(&is_stopped);

        // üèÜ Thread l·∫Øng nghe input nh∆∞ng s·∫Ω t·ª± ƒë·ªông d·ª´ng khi `is_running == false`
        let input_handle = thread::spawn(move || {
            while is_running_clone.load(Ordering::SeqCst) {
                let mut input = String::new();
                if io::stdin().read_line(&mut input).is_err()
                    || !is_running_clone.load(Ordering::Relaxed)
                {
                    break; // ‚èπ Tho√°t thread n·∫øu `is_running = false`
                }
                let input = input.trim();

                match input {
                    "p" => {
                        is_paused_clone.store(true, Ordering::SeqCst);
                        println!(
                            "{}",
                            "‚è∏  Paused üí§! Enter 'r' to resume".bold().bright_purple()
                        );
                    }
                    "r" => {
                        is_paused_clone.store(false, Ordering::SeqCst);
                        println!("{}", "‚ñ∂  Scanning...".bold().bright_purple());
                    }
                    "s" => {
                        is_stopped_clone.store(true, Ordering::SeqCst);
                        println!("{}", ">> Stop...".bold().bright_purple());
                        break;
                    }
                    _ => {}
                }
            }
        });

        let start = Instant::now();
        println!(
            "\nüîç Scanning '{}' in '{}'...",
            normalized_keyword.bold().yellow(),
            path.bold().yellow()
        );
        println!(
            "{}",
            "Enter 'p' to Pause, 'r' to Resume, 's' to Stop".bright_purple()
        );

        let count = Arc::new(AtomicUsize::new(0)); // T·∫°o bi·∫øn ƒë·∫øm an to√†n
        let count_clone = Arc::clone(&count); // Clone ƒë·ªÉ truy·ªÅn v√†o closure
        let is_stopped_clone = Arc::clone(&is_stopped);
        let is_paused_clone = Arc::clone(&is_paused);

        // Giai ƒëo·∫°n 1: Qu√©t file trong th∆∞ m·ª•c c·∫•p 1
        WalkDir::new(&path)
            .min_depth(1)
            .max_depth(1)
            .into_iter()
            .par_bridge()
            .filter_map(Result::ok)
            .for_each(|entry| {
                while is_paused_clone.load(Ordering::SeqCst) {
                    thread::sleep(Duration::from_millis(100));
                }
                if is_stopped_clone.load(Ordering::SeqCst) {
                    return;
                }

                let file_name = entry.file_name().to_string_lossy();
                let normalized_file_name = normalize_string(&file_name);
                if normalized_file_name.contains(&normalized_keyword) {
                    println!("{}", entry.path().display().to_string().cyan());
                    count_clone.fetch_add(1, Ordering::Relaxed);
                }
            });

        // Giai ƒëo·∫°n 2: Qu√©t c√°c th∆∞ m·ª•c c·∫•p 2
        let subdirs: Vec<_> = WalkDir::new(&path)
            .min_depth(depth_limit)
            .max_depth(depth_limit)
            .into_iter()
            .filter_map(Result::ok)
            .filter(|e| e.path().is_dir())
            .map(|e| e.path().to_path_buf())
            .collect();

        let is_stopped_clone = Arc::clone(&is_stopped);
        let is_paused_clone = Arc::clone(&is_paused);
        let count_clone = Arc::clone(&count);

        let _ = subdirs.par_iter().try_for_each(|subdir| {
            WalkDir::new(subdir)
                .into_iter()
                .par_bridge()
                .filter_map(Result::ok)
                .try_for_each(|entry| {
                    if is_stopped_clone.load(Ordering::SeqCst) {
                        return Err(());
                    } // D·ª´ng to√†n b·ªô thread
                    while is_paused_clone.load(Ordering::SeqCst) {
                        if is_stopped_clone.load(Ordering::SeqCst) {
                            return Err(());
                        }
                        thread::sleep(Duration::from_millis(100));
                    }
                    if is_stopped_clone.load(Ordering::SeqCst) {
                        return Err(());
                    }

                    let file_name = entry.file_name().to_string_lossy();
                    let normalized_file_name = normalize_string(&file_name);
                    if normalized_file_name.contains(&normalized_keyword) {
                        println!("{}", entry.path().display().to_string().cyan());
                        count_clone.fetch_add(1, Ordering::Relaxed);
                    }
                    Ok(())
                })
        });

        let duration = start.elapsed();
        let final_count = count.load(Ordering::Relaxed);
        println!(
            "\nüîé Total file: {} | Time: {} min {} s",
            final_count,
            duration.as_secs() / 60,
            duration.as_secs() % 60
        );
        println!(
            "{}",
            ">> Scan completed. Press Enter to start a new session!"
                .bold()
                .bright_green()
        );

        is_running.store(false, Ordering::SeqCst);
        input_handle.join().unwrap();
    }
}
